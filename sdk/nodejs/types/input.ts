// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface Gardener_shootMetadata {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    generation?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    resourceVersion?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}

export interface Gardener_shootSpec {
    addons?: pulumi.Input<inputs.Gardener_shootSpecAddons>;
    cloudProfileName: pulumi.Input<string>;
    dns?: pulumi.Input<inputs.Gardener_shootSpecDns>;
    hibernation?: pulumi.Input<inputs.Gardener_shootSpecHibernation>;
    kubernetes: pulumi.Input<inputs.Gardener_shootSpecKubernetes>;
    maintenance?: pulumi.Input<inputs.Gardener_shootSpecMaintenance>;
    monitoring?: pulumi.Input<inputs.Gardener_shootSpecMonitoring>;
    networkings: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecNetworking>[]>;
    providers: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProvider>[]>;
    purpose?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    secretBindingName: pulumi.Input<string>;
    seedName?: pulumi.Input<string>;
}

export interface Gardener_shootSpecAddons {
    kubernetesDashboard?: pulumi.Input<inputs.Gardener_shootSpecAddonsKubernetesDashboard>;
    nginxIngress?: pulumi.Input<inputs.Gardener_shootSpecAddonsNginxIngress>;
}

export interface Gardener_shootSpecAddonsKubernetesDashboard {
    authenticationMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface Gardener_shootSpecAddonsNginxIngress {
    enabled: pulumi.Input<boolean>;
}

export interface Gardener_shootSpecDns {
    domain?: pulumi.Input<string>;
}

export interface Gardener_shootSpecHibernation {
    enabled: pulumi.Input<boolean>;
    schedules?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecHibernationSchedule>[]>;
}

export interface Gardener_shootSpecHibernationSchedule {
    end?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface Gardener_shootSpecKubernetes {
    allowPrivilegedContainers?: pulumi.Input<boolean>;
    clusterAutoscaler?: pulumi.Input<inputs.Gardener_shootSpecKubernetesClusterAutoscaler>;
    kubeApiServer?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubeApiServer>;
    kubeControllerManager?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubeControllerManager>;
    kubeProxy?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubeProxy>;
    kubelet?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubelet>;
    version: pulumi.Input<string>;
}

export interface Gardener_shootSpecKubernetesClusterAutoscaler {
    scaleDownDelayAfterAdd?: pulumi.Input<string>;
    scaleDownDelayAfterDelete?: pulumi.Input<string>;
    scaleDownDelayAfterFailure?: pulumi.Input<string>;
    scaleDownUnneededTime?: pulumi.Input<string>;
    scaleDownUtilizationThreshold?: pulumi.Input<number>;
    scanInterval?: pulumi.Input<string>;
}

export interface Gardener_shootSpecKubernetesKubeApiServer {
    auditConfig?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubeApiServerAuditConfig>;
    enableBasicAuthentication?: pulumi.Input<boolean>;
    oidcConfig?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubeApiServerOidcConfig>;
}

export interface Gardener_shootSpecKubernetesKubeApiServerAuditConfig {
    auditPolicy?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicy>;
}

export interface Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicy {
    configMapRef?: pulumi.Input<inputs.Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicyConfigMapRef>;
}

export interface Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicyConfigMapRef {
    name?: pulumi.Input<string>;
}

export interface Gardener_shootSpecKubernetesKubeApiServerOidcConfig {
    caBundle?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    groupsClaim?: pulumi.Input<string>;
    groupsPrefix?: pulumi.Input<string>;
    issuerUrl?: pulumi.Input<string>;
    requiredClaims?: pulumi.Input<{[key: string]: any}>;
    signingAlgs?: pulumi.Input<pulumi.Input<string>[]>;
    usernameClaim?: pulumi.Input<string>;
    usernamePrefix?: pulumi.Input<string>;
}

export interface Gardener_shootSpecKubernetesKubeControllerManager {
    nodeCidrMaskSize?: pulumi.Input<number>;
}

export interface Gardener_shootSpecKubernetesKubeProxy {
    mode?: pulumi.Input<string>;
}

export interface Gardener_shootSpecKubernetesKubelet {
    cpuCfsQuota?: pulumi.Input<boolean>;
    cpuManagerPolicy?: pulumi.Input<string>;
    featureGates?: pulumi.Input<{[key: string]: any}>;
    podPidsLimit?: pulumi.Input<number>;
}

export interface Gardener_shootSpecMaintenance {
    autoUpdate?: pulumi.Input<inputs.Gardener_shootSpecMaintenanceAutoUpdate>;
    timeWindow?: pulumi.Input<inputs.Gardener_shootSpecMaintenanceTimeWindow>;
}

export interface Gardener_shootSpecMaintenanceAutoUpdate {
    kubernetesVersion?: pulumi.Input<boolean>;
    machineImageVersion?: pulumi.Input<boolean>;
}

export interface Gardener_shootSpecMaintenanceTimeWindow {
    begin?: pulumi.Input<string>;
    end?: pulumi.Input<string>;
}

export interface Gardener_shootSpecMonitoring {
    alerting?: pulumi.Input<inputs.Gardener_shootSpecMonitoringAlerting>;
}

export interface Gardener_shootSpecMonitoringAlerting {
    emailreceivers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface Gardener_shootSpecNetworking {
    nodes?: pulumi.Input<string>;
    pods?: pulumi.Input<string>;
    services?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface Gardener_shootSpecProvider {
    controlPlaneConfigs?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderControlPlaneConfig>[]>;
    infrastructureConfigs?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfig>[]>;
    type: pulumi.Input<string>;
    workers: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderWorker>[]>;
}

export interface Gardener_shootSpecProviderControlPlaneConfig {
    gcp?: pulumi.Input<inputs.Gardener_shootSpecProviderControlPlaneConfigGcp>;
}

export interface Gardener_shootSpecProviderControlPlaneConfigGcp {
    zone: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfig {
    aws?: pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigAws>;
    azure?: pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigAzure>;
    gcp?: pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigGcp>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAws {
    enableecraccess?: pulumi.Input<boolean>;
    networks: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigAwsNetwork>[]>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAwsNetwork {
    vpc: pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigAwsNetworkVpc>;
    zones?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigAwsNetworkZone>[]>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAwsNetworkVpc {
    cidr?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAwsNetworkZone {
    internal?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    public?: pulumi.Input<string>;
    workers?: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAzure {
    networks: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigAzureNetwork>[]>;
    zoned?: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAzureNetwork {
    serviceEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    vnet: pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigAzureNetworkVnet>;
    workers: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAzureNetworkVnet {
    cidr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcp {
    networks: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetwork>[]>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetwork {
    cloudNats?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkCloudNat>[]>;
    flowLogs?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkFlowLog>[]>;
    internal?: pulumi.Input<string>;
    vpcs?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpc>[]>;
    workers: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkCloudNat {
    minPortsPerVm?: pulumi.Input<number>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkFlowLog {
    aggregationInterval?: pulumi.Input<string>;
    flowSampling?: pulumi.Input<number>;
    metadata?: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpc {
    cloudRouters?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpcCloudRouter>[]>;
    name?: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpcCloudRouter {
    name?: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderWorker {
    annotations?: pulumi.Input<{[key: string]: any}>;
    cabundle?: pulumi.Input<string>;
    kubernetes?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderWorkerKubernete>[]>;
    labels?: pulumi.Input<{[key: string]: any}>;
    machine: pulumi.Input<inputs.Gardener_shootSpecProviderWorkerMachine>;
    maxSurge?: pulumi.Input<number>;
    maxUnavailable?: pulumi.Input<number>;
    maximum: pulumi.Input<number>;
    minimum: pulumi.Input<number>;
    name: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.Gardener_shootSpecProviderWorkerTaint>[]>;
    volume: pulumi.Input<inputs.Gardener_shootSpecProviderWorkerVolume>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface Gardener_shootSpecProviderWorkerKubernete {
    kubelet?: pulumi.Input<inputs.Gardener_shootSpecProviderWorkerKuberneteKubelet>;
}

export interface Gardener_shootSpecProviderWorkerKuberneteKubelet {
    cpuCfsQuota?: pulumi.Input<boolean>;
    cpuManagerPolicy?: pulumi.Input<string>;
    podPidsLimit?: pulumi.Input<number>;
}

export interface Gardener_shootSpecProviderWorkerMachine {
    image?: pulumi.Input<inputs.Gardener_shootSpecProviderWorkerMachineImage>;
    type: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderWorkerMachineImage {
    name: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderWorkerTaint {
    effect: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface Gardener_shootSpecProviderWorkerVolume {
    size: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
