// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface Gardener_shootMetadata {
    annotations?: {[key: string]: string};
    generation: number;
    labels?: {[key: string]: string};
    name: string;
    namespace?: string;
    resourceVersion: string;
    selfLink: string;
    uid: string;
}

export interface Gardener_shootSpec {
    addons?: outputs.Gardener_shootSpecAddons;
    cloudProfileName: string;
    dns?: outputs.Gardener_shootSpecDns;
    hibernation?: outputs.Gardener_shootSpecHibernation;
    kubernetes: outputs.Gardener_shootSpecKubernetes;
    maintenance?: outputs.Gardener_shootSpecMaintenance;
    monitoring?: outputs.Gardener_shootSpecMonitoring;
    networkings: outputs.Gardener_shootSpecNetworking[];
    providers: outputs.Gardener_shootSpecProvider[];
    purpose?: string;
    region: string;
    secretBindingName: string;
    seedName?: string;
}

export interface Gardener_shootSpecAddons {
    kubernetesDashboard?: outputs.Gardener_shootSpecAddonsKubernetesDashboard;
    nginxIngress?: outputs.Gardener_shootSpecAddonsNginxIngress;
}

export interface Gardener_shootSpecAddonsKubernetesDashboard {
    authenticationMode?: string;
    enabled: boolean;
}

export interface Gardener_shootSpecAddonsNginxIngress {
    enabled: boolean;
}

export interface Gardener_shootSpecDns {
    domain?: string;
}

export interface Gardener_shootSpecHibernation {
    enabled: boolean;
    schedules?: outputs.Gardener_shootSpecHibernationSchedule[];
}

export interface Gardener_shootSpecHibernationSchedule {
    end?: string;
    location?: string;
    start?: string;
}

export interface Gardener_shootSpecKubernetes {
    allowPrivilegedContainers?: boolean;
    clusterAutoscaler?: outputs.Gardener_shootSpecKubernetesClusterAutoscaler;
    kubeApiServer?: outputs.Gardener_shootSpecKubernetesKubeApiServer;
    kubeControllerManager?: outputs.Gardener_shootSpecKubernetesKubeControllerManager;
    kubeProxy?: outputs.Gardener_shootSpecKubernetesKubeProxy;
    kubelet?: outputs.Gardener_shootSpecKubernetesKubelet;
    version: string;
}

export interface Gardener_shootSpecKubernetesClusterAutoscaler {
    scaleDownDelayAfterAdd?: string;
    scaleDownDelayAfterDelete?: string;
    scaleDownDelayAfterFailure?: string;
    scaleDownUnneededTime?: string;
    scaleDownUtilizationThreshold?: number;
    scanInterval?: string;
}

export interface Gardener_shootSpecKubernetesKubeApiServer {
    auditConfig?: outputs.Gardener_shootSpecKubernetesKubeApiServerAuditConfig;
    enableBasicAuthentication?: boolean;
    oidcConfig?: outputs.Gardener_shootSpecKubernetesKubeApiServerOidcConfig;
}

export interface Gardener_shootSpecKubernetesKubeApiServerAuditConfig {
    auditPolicy?: outputs.Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicy;
}

export interface Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicy {
    configMapRef?: outputs.Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicyConfigMapRef;
}

export interface Gardener_shootSpecKubernetesKubeApiServerAuditConfigAuditPolicyConfigMapRef {
    name?: string;
}

export interface Gardener_shootSpecKubernetesKubeApiServerOidcConfig {
    caBundle?: string;
    clientId?: string;
    groupsClaim?: string;
    groupsPrefix?: string;
    issuerUrl?: string;
    requiredClaims?: {[key: string]: any};
    signingAlgs?: string[];
    usernameClaim?: string;
    usernamePrefix?: string;
}

export interface Gardener_shootSpecKubernetesKubeControllerManager {
    nodeCidrMaskSize?: number;
}

export interface Gardener_shootSpecKubernetesKubeProxy {
    mode?: string;
}

export interface Gardener_shootSpecKubernetesKubelet {
    cpuCfsQuota?: boolean;
    cpuManagerPolicy?: string;
    featureGates?: {[key: string]: any};
    podPidsLimit?: number;
}

export interface Gardener_shootSpecMaintenance {
    autoUpdate?: outputs.Gardener_shootSpecMaintenanceAutoUpdate;
    timeWindow?: outputs.Gardener_shootSpecMaintenanceTimeWindow;
}

export interface Gardener_shootSpecMaintenanceAutoUpdate {
    kubernetesVersion?: boolean;
    machineImageVersion?: boolean;
}

export interface Gardener_shootSpecMaintenanceTimeWindow {
    begin?: string;
    end?: string;
}

export interface Gardener_shootSpecMonitoring {
    alerting?: outputs.Gardener_shootSpecMonitoringAlerting;
}

export interface Gardener_shootSpecMonitoringAlerting {
    emailreceivers?: string[];
}

export interface Gardener_shootSpecNetworking {
    nodes?: string;
    pods?: string;
    services?: string;
    type: string;
}

export interface Gardener_shootSpecProvider {
    controlPlaneConfigs?: outputs.Gardener_shootSpecProviderControlPlaneConfig[];
    infrastructureConfigs?: outputs.Gardener_shootSpecProviderInfrastructureConfig[];
    type: string;
    workers: outputs.Gardener_shootSpecProviderWorker[];
}

export interface Gardener_shootSpecProviderControlPlaneConfig {
    gcp?: outputs.Gardener_shootSpecProviderControlPlaneConfigGcp;
}

export interface Gardener_shootSpecProviderControlPlaneConfigGcp {
    zone: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfig {
    aws?: outputs.Gardener_shootSpecProviderInfrastructureConfigAws;
    azure?: outputs.Gardener_shootSpecProviderInfrastructureConfigAzure;
    gcp?: outputs.Gardener_shootSpecProviderInfrastructureConfigGcp;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAws {
    enableecraccess?: boolean;
    networks: outputs.Gardener_shootSpecProviderInfrastructureConfigAwsNetwork[];
}

export interface Gardener_shootSpecProviderInfrastructureConfigAwsNetwork {
    vpc: outputs.Gardener_shootSpecProviderInfrastructureConfigAwsNetworkVpc;
    zones?: outputs.Gardener_shootSpecProviderInfrastructureConfigAwsNetworkZone[];
}

export interface Gardener_shootSpecProviderInfrastructureConfigAwsNetworkVpc {
    cidr?: string;
    id?: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAwsNetworkZone {
    internal?: string;
    name?: string;
    public?: string;
    workers?: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAzure {
    networks: outputs.Gardener_shootSpecProviderInfrastructureConfigAzureNetwork[];
    zoned?: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAzureNetwork {
    serviceEndpoints?: string[];
    vnet: outputs.Gardener_shootSpecProviderInfrastructureConfigAzureNetworkVnet;
    workers: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigAzureNetworkVnet {
    cidr?: string;
    name?: string;
    resourceGroup?: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcp {
    networks: outputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetwork[];
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetwork {
    cloudNats?: outputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkCloudNat[];
    flowLogs?: outputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkFlowLog[];
    internal?: string;
    vpcs?: outputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpc[];
    workers: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkCloudNat {
    minPortsPerVm?: number;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkFlowLog {
    aggregationInterval?: string;
    flowSampling?: number;
    metadata?: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpc {
    cloudRouters?: outputs.Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpcCloudRouter[];
    name?: string;
}

export interface Gardener_shootSpecProviderInfrastructureConfigGcpNetworkVpcCloudRouter {
    name?: string;
}

export interface Gardener_shootSpecProviderWorker {
    annotations?: {[key: string]: any};
    cabundle?: string;
    kubernetes?: outputs.Gardener_shootSpecProviderWorkerKubernete[];
    labels?: {[key: string]: any};
    machine: outputs.Gardener_shootSpecProviderWorkerMachine;
    maxSurge?: number;
    maxUnavailable?: number;
    maximum: number;
    minimum: number;
    name: string;
    taints?: outputs.Gardener_shootSpecProviderWorkerTaint[];
    volume: outputs.Gardener_shootSpecProviderWorkerVolume;
    zones?: string[];
}

export interface Gardener_shootSpecProviderWorkerKubernete {
    kubelet?: outputs.Gardener_shootSpecProviderWorkerKuberneteKubelet;
}

export interface Gardener_shootSpecProviderWorkerKuberneteKubelet {
    cpuCfsQuota?: boolean;
    cpuManagerPolicy?: string;
    podPidsLimit?: number;
}

export interface Gardener_shootSpecProviderWorkerMachine {
    image?: outputs.Gardener_shootSpecProviderWorkerMachineImage;
    type: string;
}

export interface Gardener_shootSpecProviderWorkerMachineImage {
    name: string;
    version: string;
}

export interface Gardener_shootSpecProviderWorkerTaint {
    effect: string;
    key: string;
    value: string;
}

export interface Gardener_shootSpecProviderWorkerVolume {
    size: string;
    type: string;
}
